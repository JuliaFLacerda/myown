export const CloudText = `VM (Virtual Machine) migration is a process that involves moving a running virtual machine from one physical host to another.\nThis can be done for various reasons, such as load balancing, hardware maintenance, or energy optimization.\nThere are two main types of VM migration: **live migration** and **cold migration**.\n\n- **Live migration** involves transferring the VM while it is still running, with minimal downtime. This method continuously syncs the memory state between the source and target hosts until the transfer is complete. Techniques like pre-copy (memory pages are copied before the VM state) and post-copy (first transferring the VM’s state, followed by memory pages) are commonly used to reduce downtime.\n\n- **Cold migration**, on the other hand, moves the VM while it is powered off. This method is simpler and doesn't require as much synchronization, but it results in longer downtime since the VM has to be stopped and restarted on the target host.\n\nThis is the first part of a series that executes VM migration in multiple abstraction levels. Here I will demonstrate two approaches: compiling the linux kernel and creating a filebox to run a QEMU ARM machine, and building a VM from a pre-stabilished distro image and a virtual disk. QEMU is the tool used by many higher level virtual machines tools, like libvirt and virsh. Here you can change fundamental aspects of VM generation and management, standing only before the linux /dev/kvm programming interface ${"(link livro)"} itself. For example, ARM virtual machines tend to be better than x86 virtual machines ${"(link artigo)"}, and you can perform that using a bash parameter.\n\nBenchmark\nLinux Kernel 6.11\nAsus Vivobook X1504ZA(8GB DDR4, Intel Core i5 1235u, 512GB SSD) with Debian 12 Gnome\nDropbear-2024.85\nBusybox 1.37.0\n\nStep 1 – Installing necessary tools\n\nsudo apt install gcc-arm-linux-gnueabi\nsudo apt-get install libncurses5-dev\nsudo apt install build-essential\nsudo apt-get install flex\nsudo apt-get install bison\nsudo apt install zlib1g-dev\nsudo apt install libglib2.0-0 libglib2.0-dev\nsudo apt install libsdl1.2-dev\nsudo apt install libpixman-1-dev libfdt-dev\nsudo apt install python3-venv\nsudo apt install python3-pip\nsudo apt install python3-sphinx\nsudo apt install ninja-build\nsudo apt-get install libtommath-dev\n\nStep 2 – Compiling the kernel to ARM EABI\n\ncd ~\n\nmkdir qemu\n\ncd qemu\n\nsudo wget https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-6.11.tar.gz\n\nsudo tar -xzvf linux-6.11.tar.gz\n\ncd linux-6.11\n\nmake CROSS_COMPILE=arm-linux-gnueabi- ARCH=arm vexpress_defconfig\nmake CROSS_COMPILE=arm-linux-gnueabi- ARCH=arm menuconfig\n${"on menu:"}\n\nsudo nano .config\n${"CONFIG_ARM_EABI=y"}\n${"CONFIG_ARM_EABI_COMPAT=y"}\nsudo make CROSS_COMPILE=arm-linux-gnueabi- ARCH=arm\n${"It can take a while"}\n\nsudo cp /qemu/linux-6.11/arch/arm/boot/dts/arm/vexpress-v2p-ca9.dtb ../\nsudo cp arch/arm/boot/zImage ../\n\nStep 3 – Installing qemu\n\ncd ~\n\nwget https://download.qemu.org/qemu-9.1.0.tar.xz\n\ntar xvJf qemu-9.1.0.tar.xz\n\ncd qemu-9.1.0\n\nmkdir build\ncd build\n../configure --target-list=arm-softmmu --audio-drv-list=\nsudo make\nsudo make install\n\nStep 4 – Installing busybox\n\ncd ~\nwget https://busybox.net/downloads/busybox-1.37.0.tar.bz2\ntar xjvf busybox-1.37.0.tar.bz2\ncd busybox-1.37.0\nsudo make defconfig\nmake CROSS_COMPILE=arm-linux-gnueabi-\n\n${`If error "libbb/hash_md5_sha.c:1316:35: error: ‘sha1_process_block64_shaNI’ undeclared" (first use in this function); did you mean ‘sha1_process_block64’?`}\n\nsudo nano libbb/hash_md5_sha.c\n${"control w:  ctx->process_block == sha1_process_block64_shaNI → for block64, as instructed"}\nsudo make CROSS_COMPILE=arm-linux-gnueabi-\nsudo make install CROSS_COMPILE=arm-linux-gnueabi-\ncd ..\nmkdir rootfs\ncd busybox-1.37.0\nsudo cp -r _install/* ../rootfs/\ncd ..\ncd rootfs\nmkdir lib\ncd ..\ncd busybox-1.37.0\nsudo cp -p /usr/arm-linux-gnueabi/lib/* ../rootfs/lib/\nsudo mkdir -p rootfs/dev\nsudo mknod rootfs/dev/tty1 c 4 1\nsudo mknod rootfs/dev/tty2 c 4 2\nsudo mknod rootfs/dev/tty3 c 4 3\nsudo mknod rootfs/dev/tty4 c 4 4\n\nMake SD card\n\ndd if=/dev/zero of=rootfs.img bs=1M count=1024\nmkfs.ext4 rootfs.img\nsudo mount -o loop rootfs.img /mnt\nsudo cp -r ~/Downloads/rootfs/* /mnt/\nsudo umount /mnt\nsudo mount -o loop ~/Downloads/rootfs.img /mnt\n\n${"Adding root user"}\n\nput the addgroup command and create /etc/group\n\nsudo qemu-system-arm -M vexpress-a9 -m 512M \\\n-kernel ~/qemu/zImage \\\n-dtb ~/qemu/vexpress-v2p-ca9.dtb \\\n-drive file=~/Downloads/rootfs.img,if=sd,format=raw \\\n-nographic -append 'root=/dev/mmcblk0 console=ttyAMA0'\n\nInside VM:\nsudo mkdir -p /mnt/etc\nsudo nano /mnt/etc/passwd\n${"root:x:0:0:root:/root:/bin/sh"}\nsudo umount /mnt\nsudo mount -o loop ~/Downloads/rootfs.img /mnt\n\n${"Adding dropbear"}\n\nwget https://matt.ucc.asn.au/dropbear/dropbear-2024.85.tar.bz2\ntar -xjf dropbear-2024.85.tar.bz2\ncd dropbear-2024\n`;
